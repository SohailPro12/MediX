const mongoose = require('mongoose');
const RendezVous = require('./src/models/Rendez-vous');

const uri = 'mongodb+srv://MediX:MediX@medix.55owr.mongodb.net/MediX?retryWrites=true&w=majority&appName=MediX';

function convertToDateWithTime(dateStr, hour = 0, minute = 0) {
  const [day, month, year] = dateStr.split("/");
  const date = new Date(year, month - 1, day, hour, minute, 0, 0);
  return date;
}



mongoose.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    console.log('‚úÖ Connexion √† MongoDB r√©ussie');
    addAppointment(); // Appel de la fonction apr√®s connexion
  })
  .catch(err => {
    console.error('‚ùå Erreur de connexion √† MongoDB:', err);
  });

async function addAppointment() {
  try {
  // Exemple : 23 avril 2025 √† 14h30
const appointmentDate = convertToDateWithTime("2/04/2025", 20, 30);
console.log(appointmentDate);  

    const appointment = new RendezVous({
      PatientId: '67bf8a6cdd399a496d546d0e',
      MedecinId: '68090e8681676d41dcd09cb7',
      date: appointmentDate,
      lieu: "Mohammedia" ,
      observation: "Rendez-vous pour consultation",
      status: "pending",
      motif: "Consultation g√©n√©rale",
    });

    const savedAppointment = await appointment.save();
    console.log('‚úÖ Nouveau rendez-vous cr√©√©');

    const savedAppointmentCheck = await RendezVous.findOne({ _id: savedAppointment._id }).populate('PatientId MedecinId');
    console.log('üìù Rendez-vous r√©cup√©r√©:', savedAppointmentCheck);

    if (savedAppointmentCheck) {
      console.log('‚úÖ V√©rification finale r√©ussie');
    } else {
      console.log('‚ùå Rendez-vous non retrouv√© apr√®s sauvegarde');
    }
  } catch (err) {
    console.error('‚ùå Erreur lors de l‚Äôajout du rendez-vous :', err);
  } finally {
    await mongoose.connection.close();
      console.log('üì¥ Connexion MongoDB ferm√©e');
    
  }
}
